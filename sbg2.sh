# --------------------------------------------------
# ENCRYPTED BY B14CK-KN1GH7 (NAFIS FUAD)
# Github   : http://github.com/nfs-tech-bd
# Facebook : http://facebook.com/nafis.fuad.904
# Telegram : http://t.me/Nafisfuad1
# --------------------------------------------------
NFS=$(mktemp)
base64 -d  >${NFS}<<B14CK-KN1GH7
#!/bin/bash
### Color
WH="\033[1;37m"
Green="\e[92;1m"
RED="\033[31m"
YELLOW="\033[33m"
BLUE="\033[1;94m"
BGCOLOR='\e[1;97;101m'    # WHITE RED
purple="\033[1;95m"
FONT="\033[0m"
GREENBG="\033[42;37m"
REDBG="\033[41;37m"
OK="${Green}--->${FONT}"
ERROR="${RED}[ERROR]${FONT}"
GRAY="\e[1;30m"
NC='\e[0m'
red='\e[1;31m'
green='\e[0;32m'
# ===================
# // Clear Data
clear
clear && clear && clear
clear;clear;clear
    #sudo apt-get install git
    #sudo apt-get install python
    #sudo apt-get install python2
    #sudo apt-get install python3
clear
  # // Banner
echo -e "${BLUE}╭═══════════════════════════════════════════════════╮ ${FONT}"
echo -e " ${YELLOW}     Bienvenido al Auto-Script MOD´s EDICION${NC}"
echo -e " ${YELLOW} Esto Configurará Rápidamente el SCRIPT en su VPS${NC}"
echo -e " ${GRAY}     Autor : ${RED}JERRY® ${NC}( ${GRAY} Hecho en Mexico ${NC})${NC}"
echo -e " ${RED}        © DEV JERRY-SBG ${NC}(${GRAY} 2024 ${NC})${NC}"
echo -e "${BLUE}╰═══════════════════════════════════════════════════╯ ${FONT}"
echo ""
sleep 5

# // Checking Os Architecture
if [[ $( uname -m | awk '{print $1}' ) == "x86_64" ]]; then
    echo -e "${OK}${BLUE} Su arquitectura es compatible ( ${WH}$( uname -m )${NC} )"
else
    echo -e "${EROR} Su arquitectura no es compatible ( ${YELLOW}$( uname -m )${NC} )"
    exit 1
fi

# // Checking System
if [[ $( cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g' ) == "ubuntu" ]]; then
    echo -e "${OK}${BLUE} Su sistema Operativo es Compatible ( ${WH}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
elif [[ $( cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g' ) == "debian" ]]; then
    echo -e "${OK}${BLUE} Su sistema Operativo es Compatible ( ${WH}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
else
    echo -e "${EROR} Su Sistema Operativo No es Compatible ( ${YELLOW}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
    exit 1
fi

# // IP Address Validating
MYIP=$(curl -sS ipv4.icanhazip.com)
if [[ $IP == "$MYIP" ]]; then
    echo -e "${EROR} Direccion De IP ( ${YELLOW}No Detectado${NC} )"
else
    echo -e "${OK}${BLUE} Direccion De IP ( ${WH}$MYIP${NC} )"
fi

# // Validate Successfull
echo ""
read -p "$( echo -e "${purple}Presione ${GRAY}[ ${NC}${RED}Enter${NC} ${GRAY}]${purple} Para iniciar la instalación") "
echo ""
clear
if [ "${EUID}" -ne 0 ]; then
        echo "Necesitas ejecutar este script como root"
        exit 1
fi
if [ "$(systemd-detect-virt)" == "openvz" ]; then
        echo "OpenVZ no es Soportado"
        exit 1
fi
red='\e[1;31m'
green='\e[0;32m'
NC='\e[0m'
#IZIN SCRIPT
MYIP=$(curl -sS ipv4.icanhazip.com)
echo -e "\e[32mCargando...\e[0m"
clear
#IZIN SCRIPT
MYIP=$(curl -sS ipv4.icanhazip.com)
echo -e "\e[32mCargando...\e[0m" 
clear
# Version sc
clear

###### SBG 
function SBG(){
#wget http://45.134.9.211:8888/key
wget http://62.72.5.161:8888/key
#wget http://45.134.9.211:8888/jerrysbg/key #python
rm -r /root/sbg2.sh
clear
mkdir -p /var/lib/ >/dev/null 2>&1
echo "IP=" >> /var/lib/ipvps.conf
clear               
echo -e " ${BLUE}╭══════════════════════════════════════════╮${NC}"
echo -e " ${BLUE}│ ${BGCOLOR}     INGRESA UN USUARIO PARA LA KEY     ${NC}${BLUE} │${NC}"
echo -e " ${BLUE}╰══════════════════════════════════════════╯${NC}"
echo " "
until [[ $author =~ ^[a-zA-Z0-9_.-]+$ ]]; do
read -rp "Introduce tu nombre aquí sin espacios : " -e author
done
echo "$author" > /etc/profil
author=$(cat /etc/profil)
echo ""
clear
echo -e "  ${BLUE}╭══════════════════════════════════════════╮${NC}"
echo -e "  ${BLUE}│ ${BGCOLOR}   INTRODUZCA LA CLAVE DE LA LICENCIA   ${NC}${BLUE} │${NC}"
echo -e "  ${BLUE}╰══════════════════════════════════════════╯${NC}"
echo " "
read -rp "Introduce tu clave aquí (Ctrl + C = Exit) : " -e kode
serial=$(cat key | grep $kode | awk '{print $3}' )
if [[ $kode == $serial ]]; then
MYIP=$(curl -sS ipv4.icanhazip.com)
rm -rf /etc/github
mkdir /etc/github
echo "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" > /etc/github/api
echo "p.layhackbins@gmail.com" > /etc/github/email
echo "JerrySBG" > /etc/github/username
clear
APIGIT=$(cat /etc/github/api)
EMAILGIT=$(cat /etc/github/email)
USERGIT=$(cat /etc/github/username)
exp=$(cat key | grep $kode | awk '{print $6}')
hariini=$(date -d "0 days" +"%Y-%m-%d")
d1=$(date -d "$exp" +%s)
d2=$(date -d "$hariini" +%s)
certificate=$(( (d1 - d2) / 86400 ))
isadmin=$(cat key | grep $kode | awk '{print $4}')
isadmin2=$(cat key | grep $kode | awk '{print $5}')
ressel=$(cat key | grep $kode | awk '{print $2}')
rm -rf .git
git config --global user.email "${EMAILGIT}" &> /dev/null
git config --global user.name "${USERGIT}" &> /dev/null
git clone https://github.com/${USERGIT}/permission.git /root/jerrysbg/ &> /dev/null
cd /root/jerrysbg/ &> /dev/null
git init &> /dev/null
touch ip &> /dev/null
#touch newuser &> /dev/null

CHATID="833821933"
KEY="7308764811:AAEC6nWpKBjRt8JeY73kzXxHtWxVFM2FzEE"
export TIME="10"
export URL="https://api.telegram.org/bot$KEY/sendMessage"
CHATID="$CHATID"
KEY="$KEY"
TIME="$TIME"
URL="$URL"
TEXT=" 
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
💻🆂🅲🆁🅸🅿🆃 🅹🅴🆁🆁🆈|🆂🅱🅶 💻 
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    <code>🛡️ 𝙍𝙀𝙎𝙀𝙇𝙇𝙀𝙍 🛡️ :</code> <code>$ressel</code>
    <code>🛡️ 𝙐𝙎𝙐𝘼𝙍𝙄𝙊 🛡️:</code> <code>$author</code>
    <code>🛡️ 𝙂𝙀𝙉 𝙆𝙀𝙔 🛡️:</code> <code>$isadmin</code>
    <code>🛡️ 𝙄𝙋𝙑𝙋𝙎 🛡️     :</code> <code>$MYIP</code>
    <code>🛡️ 𝙁𝙀𝘾𝙃𝘼 𝙍𝙀𝙂𝙄𝙎𝙏 🛡️ :</code> <code>$hariini</code>
    <code>🛡️ 𝙁𝙀𝘾𝙃𝘼 𝙀𝙓𝙋 🛡️   :</code> <code>$exp</code>
    <code>🛡️ 𝙀𝙓𝙋𝙄𝙍𝘼 𝙀𝙉 🛡️   :</code> <code>$certificate 𝕯𝖎𝖆𝖘</code>
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    (C) 𝘾𝙤𝙥𝙮𝙧𝙞𝙜𝙝𝙩 2024 𝘽𝙮 𝙅𝙀𝙍𝙍𝙔® 𝙎𝘽𝙂
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
<i>ɴᴏᴛɪꜰɪᴄᴀᴄɪᴏɴ ʀᴇɢɪꜱᴛʀᴏ ᴅᴇ ɪᴘ ᴄᴏɴ ᴇxɪᴛᴏ</i>
"'&reply_markup={"inline_keyboard":[[{"text":"🔥 𝙒𝙝𝙖𝙩𝙨𝙖𝙥𝙥 𝙊𝙛𝙞𝙘𝙞𝙖𝙡 🔥","url":"https://wa.me/+529241293310"},{"text":"🔥 𝙏𝙚𝙡𝙚𝙜𝙧𝙖𝙢 𝙊𝙛𝙞𝙘𝙞𝙖𝙡 🔥","url":"https://t.me/Jerry_SBG"}]]}'
curl -s --max-time $TIME -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null

#echo "${TEXT}" >>/root/jerrysbg/newuser 
echo > /root/jerrysbg/key
if [ "$isadmin" = "ON" ]; then
echo "###VIP### 
### $author $exp $MYIP ON $ressel $isadmin2" >>/root/jerrysbg/ip
else
echo "###FREE### 
### $author $exp $MYIP OFF $ressel $isadmin2" >> /root/jerrysbg/ip
fi
git add .
git commit -m registro &> /dev/null
git branch -M main &> /dev/null
git remote add origin https://github.com/${USERGIT}/permission.git &> /dev/null
git push -f https://${APIGIT}@github.com/${USERGIT}/permission.git &> /dev/null
rm -rf /root/jerrysbg
rm -rf /root/key
rm -rf /etc/github
rm -rf /etc/admin
rm -rf /usr/bin/e
rm -rf /etc/profil
rm -rf /etc/profil2
clear
echo -e "  ${BLUE}╭══════════════════════════════════════╮${NC}"
echo -e "  ${BLUE}│         INFORMACION LICENCIA KEY     │${NC}"
echo -e "  ${BLUE}╰══════════════════════════════════════╯${NC}"
echo -e "  ${BLUE} ═══════════════════════════════════════${NC}"
echo -e "  ${purple}  LICENCIA EXITOSA POR FAVOR ESPERE"
echo -e "  ${purple}  UN MOMENTO PARA QUE SE ACTUALICE B.D"
echo -e "  ${BLUE} ══════════════════════════════════════${NC}"
sleep 5
read -n 1 -s -r -p "Presiona Cualquier Para Empezar A Instalar"
rm -r /root/sbg2.sh
else
echo -e "  ${RED} ERROR LICENCIA VENCIDA O NO VALIDA "
echo -e "  ${RED} POR FAVOR VUELVA A INTENTAR DE NUEVO "
    sleep 1
    SBG
fi
clear
}
#########################
# USERNAME
rm -f /usr/bin/user
username=$(curl https://raw.githubusercontent.com/JerrySBG/permission/main/ip | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
username=$(cat /usr/bin/user)
expx=$(curl https://raw.githubusercontent.com/JerrySBG/permission/main/ip | grep $MYIP | awk '{print $3}')
echo "$expx" >/usr/bin/e
ressel=$(curl https://raw.githubusercontent.com/JerrySBG/permission/main/ip | grep $MYIP | awk '{print $6}')
echo "$ressel" >/etc/profil2
ressel=$(cat /etc/profil2)
oid=$(cat /usr/bin/ver)
clear
# CERTIFICATE STATUS
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expira En   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status ExpiRED Active | Geo Project
Info="(${WH}ACTIVO${NC})"
Error="(${RED}EXPIRADO${NC})"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(curl https://raw.githubusercontent.com/JerrySBG/permission/main/ip | grep $MYIP | awk '{print $4}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
echo -e "\e[32mCargando...\e[0m"
clear
# REPO    
    REPO="https://raw.githubusercontent.com/JerrySBG/scvps/main/"
SBG
####
start=$(date +%s)
secs_to_human() {
    echo "Installation time : $((${1} / 3600)) hours $(((${1} / 60) % 60)) minute's $((${1} % 60)) seconds"
}
ln -fs /usr/share/zoneinfo/America/Mexico_City /etc/localtime
sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
sysctl -w net.ipv6.conf.default.disable_ipv6=1 >/dev/null 2>&1

if [ -f "/etc/xray/domain" ]; then
echo ""
echo -e "[ ${yell}DETECTADO${NC} ] ${BLUE}Script ya Instalado"
echo -ne "[ ${red}ATENCION${NC} ] ${BLUE}¿Quieres Instalar de Nuevo? ? (y/n)? "
read answer
if [ "$answer" == "${answer#[Yy]}" ] ;then
rm setup.sh
sleep 10
exit 0
else
clear
fi
fi
### Status
function print_ok() {
    echo -e "${OK} ${BLUE} $1 ${FONT}"
}
function print_install() {
    clear
	echo -e "${BLUE} ╭══════════════════════════════════════════╮ ${FONT}"
    echo -e "${YELLOW}  # $1 ${FONT}"
	echo -e "${BLUE} ╰══════════════════════════════════════════╯ ${FONT}"
    sleep 1
}

function print_error() {
    echo -e "${ERROR} ${REDBG} $1 ${FONT}"
}

function print_success() {
    if [[ 0 -eq $? ]]; then
		clear
        echo -e "${BLUE} ╭══════════════════════════════════════════╮ ${FONT}"
        echo -e "${purple}  # $1 Instalado"
        echo -e "${BLUE} ╰══════════════════════════════════════════╯ ${FONT}"
        sleep 2
    fi
}

### Cek root
function is_root() {
    if [[ 0 == "$UID" ]]; then
        print_ok "Usuario root...Iniciar proceso de instalación"
    else
        print_error "El usuario actual no es el usuario root; cambie al usuario root y ejecute el script nuevamente."
    fi

}

# Buat direktori xray
print_install "Crear directorio de xray"
    mkdir -p /etc/xray
    
    curl -s ifconfig.me > /etc/xray/ipvps
    touch /etc/xray/domain
    mkdir -p /var/log/xray
    chown www-data.www-data /var/log/xray
    chmod +x /var/log/xray
    touch /var/log/xray/access.log
    touch /var/log/xray/error.log
    mkdir -p /var/lib/kyt >/dev/null 2>&1
    # // Ram Information
    while IFS=":" read -r a b; do
    case $a in
        "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
        "Shmem") ((mem_used+=${b/kB}))  ;;
        "MemFree" | "Buffers" | "Cached" | "SReclaimable")
        mem_used="$((mem_used-=${b/kB}))"
    ;;
    esac
    done < /proc/meminfo
    Ram_Usage="$((mem_used / 1024))"
    Ram_Total="$((mem_total / 1024))"
    export tanggal=`date -d "0 days" +"%d-%m-%Y - %X" `
    export OS_Name=$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/PRETTY_NAME//g' | sed 's/=//g' | sed 's/"//g' )
    export Kernel=$( uname -r )
    export Arch=$( uname -m )
    export IP=$( curl -s https://ipinfo.io/ip/ )

# Change Environment System
function first_setup(){
    timedatectl set-timezone America/Mexico_City
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    print_success "Directory Xray"
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
    echo "Dependencias de Configuración $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
    apt-get install --no-install-recommends software-properties-common
    add-apt-repository ppa:vbernat/haproxy-2.0 -y
    apt-get -y install haproxy=2.0.\*
elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
    echo "Las Dependencias de Configuración para el Sistema Operativo Son $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
    curl https://haproxy.debian.net/bernat.debian.org.gpg |
        gpg --dearmor >/usr/share/keyrings/haproxy.debian.net.gpg
    echo deb "[signed-by=/usr/share/keyrings/haproxy.debian.net.gpg]" \
        http://haproxy.debian.net buster-backports-1.8 main \
        >/etc/apt/sources.list.d/haproxy.list
    sudo apt-get update
    sudo apt-get upgrade
    apt-get -y install haproxy=1.8.\*
else
    echo -e " Su Sistema Operativo No es Compatible ($(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g') )"
    exit 1
fi
}

# GEO PROJECT
clear
function nginx_install() {
    # // Checking System
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
        print_install "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        # // sudo add-apt-repository ppa:nginx/stable -y 
        sudo apt-get install nginx -y 
    elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
        print_success "Setup nginx For OS Is $(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')"
        apt -y install nginx 
    else
        echo -e " Su Sistema Operativo No es Compatible ( ${YELLOW}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${FONT} )"
        # // exit 1
    fi
}

# Update and remove packages
function base_package() {
    clear
    ########
    print_install "Instalación de Paquetes"
    apt install zip pwgen openssl netcat socat cron bash-completion -y
    apt install figlet -y
    apt dist-upgrade -y
    systemctl enable chronyd
    systemctl restart chronyd
    systemctl enable chrony
    systemctl restart chrony
    chronyc sourcestats -v
    chronyc tracking -v
    apt install ntpdate -y
    ntpdate pool.ntp.org
    apt install sudo -y
    sudo apt-get clean all
    sudo apt-get autoremove -y
    sudo apt-get install -y debconf-utils
    sudo apt-get remove --purge exim4 -y
    sudo apt-get remove --purge ufw firewalld -y
    sudo apt-get install -y --no-install-recommends software-properties-common
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    sudo apt-get install -y speedtest-cli vnstat libnss3-dev libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev libcurl4-nss-dev flex bison make libnss3-tools libevent-dev bc rsyslog dos2unix zlib1g-dev libssl-dev libsqlite3-dev sed dirmngr libxml-parser-perl build-essential gcc g++ htop lsof tar wget curl ruby zip unzip p7zip-full python3-pip libc6 util-linux build-essential msmtp-mta ca-certificates bsd-mailx iptables iptables-persistent netfilter-persistent net-tools openssl ca-certificates gnupg gnupg2 ca-certificates lsb-release gcc shc make cmake git screen socat xz-utils apt-transport-https gnupg1 dnsutils cron bash-completion ntpdate chrony jq openvpn easy-rsa
    print_success "Paquetes Configurados"
    
}
clear
# Fungsi input domain
function pasang_domain() {
clear
echo -e ""
clear
echo -e "${BLUE}╭═══════════════════════════════════════════════════╮${NC}"
echo -e "${BLUE}│     \033[1;37mSeleccione Opcion para Configurar Dominio     ${BLUE}│${NC}"
echo -e "${BLUE}╰═══════════════════════════════════════════════════╯${NC}"
echo -e "${BLUE}╭═══════════════════════════════════════════════════╮${NC}"
echo -e "${BLUE}│  [ 1 ]  \033[1;37mTu propio Dominio      ${NC}"
echo -e "${BLUE}│  [ 2 ]  \033[1;37mDominio Gratis del Script  ${NC}"
echo -e "${BLUE}╰═══════════════════════════════════════════════════╯${NC}"
echo ""
read -p "   Seleccione los Números 1 o 2 : " host
clear

if [[ $host == "1" ]]; then
clear
echo -e "${BLUE}╭══════════════════════════════════════════╮${NC}"
echo -e "${BLUE}│            \033[1;37mDOMINIO O SUBDOMINIO          ${BLUE}│${NC}"
echo -e "${BLUE}╰══════════════════════════════════════════╯${NC}"
echo -e  "${BLUE}╭══════════════════════════════════════════╮${NC}"
echo -e  "${BLUE}│               \033[1;37mGRACIAS POR                ${BLUE}│${NC}"
echo -e  "${BLUE}│        \033[1;37mUSAR MI AUTOSCRIPT PREMIUM        ${BLUE}│${NC}"
echo -e  "${BLUE}│                \033[1;37mBY JERRY 2024             ${BLUE}│${NC}"
echo -e  "${BLUE}╰══════════════════════════════════════════╯${NC}"
echo " "
read -p "   Introduce tu Sub/Dominio aquí: " host1
rm -rf /var/lib/kyt/ipvps.conf
rm -rf /etc/xray/domain
rm -rf /root/domain
echo "IP=" >> /var/lib/kyt/ipvps.conf
echo $host1 > /etc/xray/domain
echo $host1 > /root/domain
echo ""
fi
if [[ $host == "2" ]]; then
#install cf
clear
MYIP=$(wget -qO- ipinfo.io/ip);
apt install jq curl -y >/dev/null 2>&1
clear
echo -e ""
echo -e  "${BLUE}╭═══════════════════════════════════════════════════╮${NC}"
echo -e  "${BLUE}│  \033[1;37mEjemplo de subdominio XXX.jerrysbg.com Entonces  ${BLUE}│${NC}"
echo -e  "${BLUE}│  \033[1;37mRemplaza solo XXX que sera tu Subdominio         ${BLUE}│${NC}"
echo -e  "${BLUE}╰═══════════════════════════════════════════════════╯${NC}"
echo " "
read -rp "   Ingresa tu Subdominio aquí sin Espacios y en MINUSCULA: " -e sub
echo -e ""
DOMAIN=jerrysbg.com
SUB_DOMAIN=${sub}.jerrysbg.com
CF_ID=pl.ayhackbins@gmail.com
CF_KEY=54235f28506964af3fa4e8c2be734f50b11ed
set -euo pipefail
IP=$(wget -qO- ifconfig.me/ip);
echo "Actualizando DNS para ${SUB_DOMAIN}..."
ZONE=$(curl -sLX GET "https://api.cloudflare.com/client/v4/zones?name=${DOMAIN}&status=active" \
     -H "X-Auth-Email: ${CF_ID}" \
     -H "X-Auth-Key: ${CF_KEY}" \
     -H "Content-Type: application/json" | jq -r .result[0].id)

RECORD=$(curl -sLX GET "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records?name=${SUB_DOMAIN}" \
     -H "X-Auth-Email: ${CF_ID}" \
     -H "X-Auth-Key: ${CF_KEY}" \
     -H "Content-Type: application/json" | jq -r .result[0].id)

if [[ "${#RECORD}" -le 10 ]]; then
     RECORD=$(curl -sLX POST "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records" \
     -H "X-Auth-Email: ${CF_ID}" \
     -H "X-Auth-Key: ${CF_KEY}" \
     -H "Content-Type: application/json" \
     --data '{"type":"A","name":"'${SUB_DOMAIN}'","content":"'${IP}'","ttl":120,"proxied":false}' | jq -r .result.id)
fi

RESULT=$(curl -sLX PUT "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records/${RECORD}" \
     -H "X-Auth-Email: ${CF_ID}" \
     -H "X-Auth-Key: ${CF_KEY}" \
     -H "Content-Type: application/json" \
     --data '{"type":"A","name":"'${SUB_DOMAIN}'","content":"'${IP}'","ttl":120,"proxied":false}')
echo "Host : $SUB_DOMAIN"
echo "IP=" >> /var/lib/kyt/ipvps.conf
echo $SUB_DOMAIN > /etc/xray/domain
echo $SUB_DOMAIN > /root/domain
cd
clear
    fi
}

clear
#GANTI PASSWORD DEFAULT
function password_default() {
    domain=$(cat /root/domain)
    city=$(curl -sS https://ipinfo.io/city)
    HOSTNAME=$(curl -sS https://ipinfo.io/org)
    MYIP=$(curl -sS ipv4.icanhazip.com)
    CHATID="833821933"
    KEY="5340711015:AAEgC3JCrQZ2fkFqfV40UyqLfyzMmXX9BZI"
    TIME="10"
    URL="https://api.telegram.org/bot$KEY/sendMessage"
    TEXT="  
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
💻🆂🅲🆁🅸🅿🆃 🅹🅴🆁🆁🆈|🆂🅱🅶 💻
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    <code>𝘾𝙍𝙀𝘼𝘿𝙊     :</code> <code>$tanggal</code>
    <code>𝘾𝙄𝙐𝘿𝘼𝘿   :</code> <code>${city}</code>
    <code>𝘾𝙊𝙈𝙋𝘼Ñ𝙄𝘼   :</code> <code>${HOSTNAME}</code>
    <code>𝙄𝙋 𝙑𝙋𝙎     :</code> <code>$MYIP</code>
    <code>𝙊𝙎 𝙑𝙋𝙎     :</code> <code>$OS_Name</code>
    <code>𝙊𝙎 𝙑𝙋𝙎     :</code> <code>$Kernel</code>
    <code>𝘼𝙧𝙘𝙝       :</code> <code>$Arch</code>
    <code>𝙍𝙖𝙢 𝙐𝙨𝙖𝙙𝙖  :</code> <code>$Ram_Usage MB</code>
    <code>𝙍𝙖𝙢 𝙏𝙤𝙩𝙖𝙡  :</code> <code>$Ram_Total MB</code>
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    <code>𝘿𝙤𝙢𝙞𝙣𝙞𝙤   :</code> <code>$domain</code>
    <code>𝙐𝙨𝙚𝙧 𝙎𝙘𝙧𝙞𝙥𝙩:</code> <code>$author</code>
    <code>𝙑𝙀𝙉𝘿𝙀𝘿𝙊𝙍 𝙎𝘾:</code> <code>$ressel</code>
    <code>𝙀𝙭𝙥 𝙎𝙘𝙧𝙞𝙥𝙩 :</code> <code>$expx</code>
<code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    (C) 𝘾𝙤𝙥𝙮𝙧𝙞𝙜𝙝𝙩 2024 𝘽𝙮 𝙅𝙀𝙍𝙍𝙔® 𝙎𝘽𝙂
 <code>◇━━━━━━━━━━━━━━━━━━━━━━━━━━◇</code>
    <i>ᴀᴜᴛᴏꜱᴄʀɪᴘᴛ ɪɴꜱᴛᴀʟᴀᴅᴏ ᴄᴏʀʀᴇᴄᴛᴀᴍᴇɴᴛᴇ</i>
"'&reply_markup={"inline_keyboard":[[{"text":"🔥 𝙒𝙝𝙖𝙩𝙨𝙖𝙥𝙥 𝙊𝙛𝙞𝙘𝙞𝙖𝙡 🔥","url":"https://wa.me/+529241293310"},{"text":"🔥 𝙏𝙚𝙡𝙚𝙜𝙧𝙖𝙢 𝙊𝙛𝙞𝙘𝙞𝙖𝙡 🔥","url":"https://t.me/Jerry_SBG"}]]}'
   curl -s --max-time $TIME -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null
}

clear
# Pasang SSL
function pasang_ssl() {
clear
print_install "Instalación de SSL en el Dominio"
    rm -rf /etc/xray/xray.key
    rm -rf /etc/xray/xray.crt
    domain=$(cat /root/domain)
    STOPWEBSERVER=$(lsof -i:80 | cut -d' ' -f1 | awk 'NR==2 {print $1}')
    rm -rf /root/.acme.sh
    mkdir /root/.acme.sh
    systemctl stop $STOPWEBSERVER
    systemctl stop nginx
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    chmod 777 /etc/xray/xray.key
    print_success "Certificado SSL"
}

function make_folder_xray() {
rm -rf /etc/vmess/.vmess.db
    rm -rf /etc/vless/.vless.db
    rm -rf /etc/trojan/.trojan.db
    rm -rf /etc/shadowsocks/.shadowsocks.db
    rm -rf /etc/ssh/.ssh.db
    rm -rf /etc/bot/.bot.db
    mkdir -p /etc/bot
    mkdir -p /etc/xray
    mkdir -p /etc/vmess
    mkdir -p /etc/vless
    mkdir -p /etc/trojan
    mkdir -p /etc/shadowsocks
    mkdir -p /etc/ssh
    mkdir -p /usr/bin/xray/
    mkdir -p /var/log/xray/
    mkdir -p /var/www/html
    mkdir -p /etc/kyt/limit/vmess/ip
    mkdir -p /etc/kyt/limit/vless/ip
    mkdir -p /etc/kyt/limit/trojan/ip
    mkdir -p /etc/kyt/limit/ssh/ip
    mkdir -p /etc/limit/vmess
    mkdir -p /etc/limit/vless
    mkdir -p /etc/limit/trojan
    mkdir -p /etc/limit/ssh
    chmod +x /var/log/xray
    touch /etc/xray/domain
    touch /var/log/xray/access.log
    touch /var/log/xray/error.log
    touch /etc/vmess/.vmess.db
    touch /etc/vless/.vless.db
    touch /etc/trojan/.trojan.db
    touch /etc/shadowsocks/.shadowsocks.db
    touch /etc/ssh/.ssh.db
    touch /etc/bot/.bot.db
    echo "& plughin Account" >>/etc/vmess/.vmess.db
    echo "& plughin Account" >>/etc/vless/.vless.db
    echo "& plughin Account" >>/etc/trojan/.trojan.db
    echo "& plughin Account" >>/etc/shadowsocks/.shadowsocks.db
    echo "& plughin Account" >>/etc/ssh/.ssh.db
    }
#Instal Xray
function install_xray() {
clear
    print_install "Core Xray 1.8.1 Latest Version"
    # install xray
    #echo -e "[ ${green}INFO$NC ] Downloading & Installing xray core"
    domainSock_dir="/run/xray";! [ -d $domainSock_dir ] && mkdir  $domainSock_dir
    chown www-data.www-data $domainSock_dir
    
    # / / Ambil Xray Core Version Terbaru
latest_version="$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)"
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version $latest_version
 
    # // Ambil Config Server
    wget -O /etc/xray/config.json "${REPO}xray/config.json" >/dev/null 2>&1
    #wget -O /usr/local/bin/xray "${REPO}xray/xray.linux.64bit" >/dev/null 2>&1
    wget -O /etc/systemd/system/runn.service "${REPO}xray/runn.service" >/dev/null 2>&1
    #chmod +x /usr/local/bin/xray
    domain=$(cat /etc/xray/domain)
    IPVS=$(cat /etc/xray/ipvps)
    print_success "Core Xray 1.8.1 Latest Version"
    
    # Settings UP Nginix Server
    clear
    curl -s ipinfo.io/city >>/etc/xray/city
    curl -s ipinfo.io/org | cut -d " " -f 2-10 >>/etc/xray/isp
    print_install "Instalación de la Configuración de Paquetes"
    wget -O /etc/haproxy/haproxy.cfg "${REPO}xray/haproxy.cfg" >/dev/null 2>&1
    wget -O /etc/nginx/conf.d/xray.conf "${REPO}xray/xray.conf" >/dev/null 2>&1
    sed -i "s/xxx/${domain}/g" /etc/haproxy/haproxy.cfg
    sed -i "s/xxx/${domain}/g" /etc/nginx/conf.d/xray.conf
    curl ${REPO}ssh/nginx.conf > /etc/nginx/nginx.conf
    
cat /etc/xray/xray.crt /etc/xray/xray.key | tee /etc/haproxy/hap.pem

    # > Set Permission
    chmod +x /etc/systemd/system/runn.service

    # > Create Service
    rm -rf /etc/systemd/system/xray.service.d
    cat >/etc/systemd/system/xray.service <<EOF
Description=Xray Service
Documentation=https://github.com
After=network.target nss-lookup.target

[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target

EOF
print_success "Paquetes Configurados"
}

function ssh(){
clear
print_install "Instalación Password SSH"
    wget -O /etc/pam.d/common-password "${REPO}ssh/password"
chmod +x /etc/pam.d/common-password

    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure keyboard-configuration
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/compose select No compose key"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layoutcode string de"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layout select English"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/modelcode string pc105"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/model select Generic 105-key (Intl) PC"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/optionscode string "
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/switch select No temporary switch"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/toggle select No toggling"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_options boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_layout boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_options boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variantcode string "
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variant select English"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/xkb-keymap select "

# go to root
cd

# Edit file /etc/systemd/system/rc-local.service
cat > /etc/systemd/system/rc-local.service <<-END
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
END

# nano /etc/rc.local
cat > /etc/rc.local <<-END
#!/bin/sh -e
# rc.local
# By default this script does nothing.
exit 0
END

# Ubah izin akses
chmod +x /etc/rc.local

# enable rc local
systemctl enable rc-local
systemctl start rc-local.service

# disable ipv6
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local

#update
# set time GMT +7
ln -fs /usr/share/zoneinfo/America/Mexico_City /etc/localtime

# set locale
sed -i 's/AcceptEnv/#AcceptEnv/g' /etc/ssh/sshd_config
print_success "Password SSH"
}

function udp_mini(){
clear
print_install "Instalación de Servicio de Cuota Límite"
wget -q -O /usr/local/sbin/quota "${REPO}limit/quota"
chmod +x /usr/local/sbin/quota
chmod + x /usr/local/sbin/quota
cd /usr/local/sbin/
sed -i 's/\r//' quota
cd
wget -q -O /usr/bin/limit-ip "${REPO}limit/limit-ip"
chmod +x /usr/bin/*
cd /usr/bin
sed -i 's/\r//' limit-ip
cd
clear
#SERVICE LIMIT ALL IP
cat >/etc/systemd/system/vmip.service << EOF
[Unit]
Description=My
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/bin/limit-ip vmip
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart vmip
systemctl enable vmip

cat >/etc/systemd/system/vlip.service << EOF
[Unit]
Description=My
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/bin/limit-ip vlip
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart vlip
systemctl enable vlip

cat >/etc/systemd/system/trip.service << EOF
[Unit]
Description=My
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/bin/limit-ip trip
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart trip
systemctl enable trip
#SERVICE LIMIT QUOTA

#SERVICE VMESS
cat >/etc/systemd/system/qmv.service << EOF
[Unit]
Description=My
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/local/sbin/quota vmess
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart qmv
systemctl enable qmv

#SERVICE VLESS
cat >/etc/systemd/system/qmvl.service << EOF
[Unit]
Description=My 
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/local/sbin/quota vless
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart qmvl
systemctl enable qmvl

#SERVICE TROJAN
cat >/etc/systemd/system/qmtr.service << EOF
[Unit]
Description=My 
ProjectAfter=network.target

[Service]
WorkingDirectory=/root
ExecStart=/usr/local/sbin/quota trojan
Restart=always

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart qmtr
systemctl enable qmtr
# // Installing UDP Mini
mkdir -p /usr/local/kyt/
wget -q -O /usr/local/kyt/udp-mini "${REPO}badvpn/udp-mini"
chmod +x /usr/local/kyt/udp-mini
wget -q -O /etc/systemd/system/udp-mini-1.service "${REPO}badvpn/udp-mini-1.service"
wget -q -O /etc/systemd/system/udp-mini-2.service "${REPO}badvpn/udp-mini-2.service"
wget -q -O /etc/systemd/system/udp-mini-3.service "${REPO}badvpn/udp-mini-3.service"
systemctl disable udp-mini-1
systemctl stop udp-mini-1
systemctl enable udp-mini-1
systemctl start udp-mini-1
systemctl disable udp-mini-2
systemctl stop udp-mini-2
systemctl enable udp-mini-2
systemctl start udp-mini-2
systemctl disable udp-mini-3
systemctl stop udp-mini-3
systemctl enable udp-mini-3
systemctl start udp-mini-3
print_success "Servicio de Cuota Límite"
}

function ssh_slow(){
clear
# // Installing UDP Mini
print_install "Instalar el Módulo SlowDNS Server"
    wget -q -O /tmp/nameserver "${REPO}slowdns/nameserver" >/dev/null 2>&1
    chmod +x /tmp/nameserver
    bash /tmp/nameserver | tee /root/install.log
 print_success "SlowDNS"
}

clear
function ins_SSHD(){
clear
print_install "Instalación SSHD"
wget -q -O /etc/ssh/sshd_config "${REPO}ws/sshd" >/dev/null 2>&1
chmod 700 /etc/ssh/sshd_config
/etc/init.d/ssh restart
systemctl restart ssh
/etc/init.d/ssh status
print_success "SSHD"
}

clear
function ins_dropbear(){
clear
print_install "Instalación Dropbear"
# // Installing Dropbear
apt-get install dropbear -y > /dev/null 2>&1
wget -q -O /etc/default/dropbear "${REPO}ssh/dropbear.conf"
chmod +x /etc/default/dropbear
/etc/init.d/dropbear restart
/etc/init.d/dropbear status
print_success "Dropbear"
}

clear
function ins_vnstat(){
clear
print_install "Instalación Vnstat"
# setting vnstat
apt -y install vnstat > /dev/null 2>&1
/etc/init.d/vnstat restart
apt -y install libsqlite3-dev > /dev/null 2>&1
wget https://humdi.net/vnstat/vnstat-2.6.tar.gz
tar zxvf vnstat-2.6.tar.gz
cd vnstat-2.6
./configure --prefix=/usr --sysconfdir=/etc && make && make install
cd
vnstat -u -i $NET
sed -i 's/Interface "'""eth0""'"/Interface "'""$NET""'"/g' /etc/vnstat.conf
chown vnstat:vnstat /var/lib/vnstat -R
systemctl enable vnstat
/etc/init.d/vnstat restart
/etc/init.d/vnstat status
rm -f /root/vnstat-2.6.tar.gz
rm -rf /root/vnstat-2.6
print_success "Vnstat"
}

function ins_openvpn(){
clear
print_install "Instalación OpenVPN"
#OpenVPN
wget ${REPO}ssh/openvpn &&  chmod +x openvpn && ./openvpn
/etc/init.d/openvpn restart
print_success "OpenVPN"
}

function ins_backup(){
clear
print_install "Instalación Backup Server"
#BackupOption
apt install rclone -y
printf "q\n" | rclone config
wget -O /root/.config/rclone/rclone.conf "${REPO}backup/rclone.conf"
#Install Wondershaper
cd /bin
git clone  https://github.com/magnific0/wondershaper.git
cd wondershaper
sudo make install
cd
rm -rf wondershaper
echo > /home/limit
apt install msmtp-mta ca-certificates bsd-mailx -y
cat<<EOF>>/etc/msmtprc
defaults
tls on
tls_starttls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt

account default
host smtp.gmail.com
port 587
auth on
user oceantestdigital@gmail.com
from oceantestdigital@gmail.com
password jokerman77 
logfile ~/.msmtp.log
EOF
chown -R www-data:www-data /etc/msmtprc
wget -q -O /etc/ipserver "${REPO}ssh/ipserver" && bash /etc/ipserver
print_success "Backup Server"
}

clear
function ins_swab(){
clear
print_install "Instalación Cache 4 Gb"
gotop_latest="$(curl -s https://api.github.com/repos/xxxserxxx/gotop/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)"
    gotop_link="https://github.com/xxxserxxx/gotop/releases/download/v$gotop_latest/gotop_v"$gotop_latest"_linux_amd64.deb"
    curl -sL "$gotop_link" -o /tmp/gotop.deb
    dpkg -i /tmp/gotop.deb >/dev/null 2>&1
    
    # > Buat swap sebesar 1G
    #    dd if=/dev/zero of=/swapfile bs=1024 count=786432
    # > Buat swap sebesar 2G
        dd if=/dev/zero of=/swapfile bs=1024 count=1048576
    # > Buat swap sebesar 3G
    #    dd if=/dev/zero of=/swapfile bs=1024 count=2097152
    # > Buat swap sebesar 4G
    #dd if=/dev/zero of=/swapfile bs=1024 count=4194304
    mkswap /swapfile
    chown root:root /swapfile
    chmod 0600 /swapfile >/dev/null 2>&1
    swapon /swapfile >/dev/null 2>&1
    sed -i '$ i\/swapfile      swap swap   defaults    0 0' /etc/fstab

    # > Singkronisasi jam
    chronyd -q 'server 0.id.pool.ntp.org iburst'
    chronyc sourcestats -v
    chronyc tracking -v
    
    wget ${REPO}bbr.sh &&  chmod +x bbr.sh && ./bbr.sh
print_success "Swap 4 Gb"
}

function ins_Fail2ban(){
clear
print_install "Instalación Fail2ban"
apt -y install fail2ban > /dev/null 2>&1
#sudo systemctl enable --now fail2ban
/etc/init.d/fail2ban restart
/etc/init.d/fail2ban status

# Instal DDOS Flate
if [ -d '/usr/local/ddos' ]; then
	echo; echo; echo "Primero Desinstale la Versión Anterior"
    exit 0
else
	mkdir /usr/local/ddos
fi

clear
# banner
echo "Banner /etc/kyt.txt" >>/etc/ssh/sshd_config
sed -i 's@DROPBEAR_BANNER=""@DROPBEAR_BANNER="/etc/kyt.txt"@g' /etc/default/dropbear

# Ganti Banner
wget -O /etc/kyt.txt "${REPO}ssh/issue.net"
print_success "Fail2ban"
}

function ins_epro(){
clear
print_install "Instalación ePro WebSocket Proxy"
    wget -O /usr/bin/ws "${REPO}ws/ws" >/dev/null 2>&1
    wget -O /usr/bin/tun.conf "${REPO}ws/tun.conf" >/dev/null 2>&1
    wget -O /etc/systemd/system/ws.service "${REPO}ws/ws.service" >/dev/null 2>&1
    chmod +x /etc/systemd/system/ws.service
    chmod +x /usr/bin/ws
    chmod 644 /usr/bin/tun.conf
systemctl disable ws
systemctl stop ws
systemctl enable ws
systemctl start ws
systemctl restart ws
wget -q -O /usr/local/share/xray/geosite.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" >/dev/null 2>&1
wget -q -O /usr/local/share/xray/geoip.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" >/dev/null 2>&1
wget -O /usr/sbin/ftvpn "${REPO}ws/ftvpn" >/dev/null 2>&1
chmod +x /usr/sbin/ftvpn
iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP
iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP
iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP
iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce" -j DROP
iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP
iptables-save > /etc/iptables.up.rules
iptables-restore -t < /etc/iptables.up.rules
netfilter-persistent save
netfilter-persistent reload

# remove unnecessary files
cd
apt autoclean -y >/dev/null 2>&1
apt autoremove -y >/dev/null 2>&1
print_success "ePro WebSocket Proxy"
}

function ins_restart(){
clear
print_install "Reiniciar Todos los Paquetes"
/etc/init.d/nginx restart
/etc/init.d/openvpn restart
/etc/init.d/ssh restart
/etc/init.d/dropbear restart
/etc/init.d/fail2ban restart
/etc/init.d/vnstat restart
systemctl restart haproxy
/etc/init.d/cron restart
    systemctl daemon-reload
    systemctl start netfilter-persistent
    systemctl enable --now nginx
    systemctl enable --now xray
    systemctl enable --now rc-local
    systemctl enable --now dropbear
    systemctl enable --now openvpn
    systemctl enable --now cron
    systemctl enable --now haproxy
    systemctl enable --now netfilter-persistent
    systemctl enable --now ws
    systemctl enable --now fail2ban
history -c
echo "unset HISTFILE" >> /etc/profile

cd
rm -f /root/openvpn
rm -f /root/key.pem
rm -f /root/cert.pem
print_success "Todos los Paquetes Reiniciados"
}

#Instal Menu
function menu(){
    clear
    print_install "Instalación Extra Menu"
    wget ${REPO}menu/menu.zip
    unzip menu.zip
    chmod +x menu/*
    mv menu/* /usr/local/sbin
    rm -rf menu
    rm -rf menu.zip
}

# Membaut Default Menu 
function profile(){
clear
    cat >/root/.profile <<EOF
# ~/.profile: executed by Bourne-compatible login shells.
if [ "$BASH" ]; then
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi
fi
mesg n || true
menu
EOF

cat >/etc/cron.d/xp_all <<-END
		SHELL=/bin/sh
		PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
		2 0 * * * root /usr/local/sbin/xp
	END
    chmod 644 /root/.profile
	
    cat >/etc/cron.d/daily_reboot <<-END
		SHELL=/bin/sh
		PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
		0 5 * * * root /sbin/reboot
	END

    echo "*/1 * * * * root echo -n > /var/log/nginx/access.log" >/etc/cron.d/log.nginx
    echo "*/1 * * * * root echo -n > /var/log/xray/access.log" >>/etc/cron.d/log.xray
    service cron restart
    cat >/home/daily_reboot <<-END
		5
	END

cat >/etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
EOF

echo "/bin/false" >>/etc/shells
echo "/usr/sbin/nologin" >>/etc/shells
cat >/etc/rc.local <<EOF
#!/bin/sh -e
# rc.local
# By default this script does nothing.
iptables -I INPUT -p udp --dport 5300 -j ACCEPT
iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5300
systemctl restart netfilter-persistent
exit 0
EOF

    chmod +x /etc/rc.local
    
    AUTOREB=$(cat /home/daily_reboot)
    SETT=11
    if [ $AUTOREB -gt $SETT ]; then
        TIME_DATE="PM"
    else
        TIME_DATE="AM"
    fi
print_success "Menu Extra"
}

# Restart layanan after install
function enable_services(){
clear
print_install "Habilitar Servicios"
    systemctl daemon-reload
    systemctl start netfilter-persistent
    systemctl enable --now rc-local
    systemctl enable --now cron
    systemctl enable --now netfilter-persistent
    systemctl restart nginx
    systemctl restart xray
    systemctl restart cron
    systemctl restart haproxy
    print_success "Servicios Habilitados"
    clear
}

# Fingsi Install Script
function instal(){
clear
    pasang_domain
    first_setup
    nginx_install
    base_package
    make_folder_xray
    pasang_ssl
    install_xray
    ssh
    udp_mini
    #ssh_slow
    ins_SSHD
    ins_dropbear
    ins_vnstat
    ins_openvpn
    ins_backup
    ins_swab
    ins_Fail2ban
    ins_epro
    ins_restart
    menu
    profile
    enable_services
    password_default
}
instal
echo ""
history -c
rm -rf /root/menu
rm -rf /root/*.zip
rm -rf /root/*.sh
rm -rf /root/LICENSE
rm -rf /root/README.md
rm -rf /root/domain
#sudo hostnamectl set-hostname $user
secs_to_human "$(($(date +%s) - ${start}))"
echo ""
echo " "
echo "=====================-[ AUTOSCRIPT ]-===================="
echo ""
echo "------------------------------------------------------------"
echo ""
echo ""
echo "   >>> Service & Port"  | tee -a log-install.txt
echo "   - SlowDNS SSH              : ALL Port SSH"  | tee -a log-install.txt
echo "   - OpenSSH                  : 22"  | tee -a log-install.txt
echo "   - SSH Websocket            : 80,8008,8080,8081,8090,8280" | tee -a log-install.txt
echo "   - SSH SSL Websocket        : 443" | tee -a log-install.txt
echo "   - OpenVPN Websocket SSL    : 1194" | tee -a log-install.txt
echo "   - OpenVPN SSL              : 1194" | tee -a log-install.txt
echo "   - OpenVPN TCP              : 1194" | tee -a log-install.txt
echo "   - OpenVPN UDP              : 2200" | tee -a log-install.txt
echo "   - SSH SSL Directo          : 443" | tee -a log-install.txt
echo "   - Dropbear                 : 109, 143" | tee -a log-install.txt
echo "   - Badvpn                   : 7100-7900" | tee -a log-install.txt
echo "   - Nginx                    : 81" | tee -a log-install.txt
echo "   - Vmess WS TLS             : 443" | tee -a log-install.txt
echo "   - Vless WS TLS             : 443" | tee -a log-install.txt
echo "   - Trojan WS TLS            : 443" | tee -a log-install.txt
echo "   - Shadowsocks WS TLS       : 443" | tee -a log-install.txt
echo "   - Vmess WS none TLS        : 80" | tee -a log-install.txt
echo "   - Vless WS none TLS        : 80" | tee -a log-install.txt
echo "   - Trojan WS none TLS       : 80" | tee -a log-install.txt
echo "   - Shadowsocks WS none TLS  : 80" | tee -a log-install.txt
echo "   - Vmess gRPC               : 443" | tee -a log-install.txt
echo "   - Vless gRPC               : 443" | tee -a log-install.txt
echo "   - Trojan gRPC              : 443" | tee -a log-install.txt
echo "   - Shadowsocks gRPC         : 443" | tee -a log-install.txt
echo ""
echo ""
echo "------------------------------------------------------------"
echo ""
echo "=====================-[ By JERRY® ]-===================="
echo -e ""
echo ""
echo "" | tee -a log-install.txt
echo -e ""
sudo hostnamectl set-hostname $username
echo -e "${YELLOW} Script Instalado Correctamente"
echo ""
read -p "$( echo -e "${YELLOW}Presione ${YELLOW}[ ${RED}Enter ${YELLOW}]${YELLOW} Para Reiniciar") "
reboot

B14CK-KN1GH7
source ${NFS}
rm -rf ${NFS}